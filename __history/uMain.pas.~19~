unit uMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.ExtCtrls, Vcl.StdCtrls,Clipbrd,uMask,
  Vcl.Buttons,shellapi, Vcl.Menus,uInputText;
const
  PIC_DIR:string='pic'; // 保存图片的子目录名
type
  TfMain = class(TForm)
    Panel1: TPanel;
    stb1: TStatusBar;
    ScrollBox1: TScrollBox;
    Image1: TImage;
    cb1: TColorBox;
    cmbShape: TComboBox;
    Label1: TLabel;
    Label2: TLabel;
    cmbFine: TComboBox;
    Label3: TLabel;
    btnStart: TBitBtn;
    btnExec: TBitBtn;
    MMu: TMainMenu;
    muFile: TMenuItem;
    muSave: TMenuItem;
    muOtherSave: TMenuItem;
    muOpenFile: TMenuItem;
    N1: TMenuItem;
    N2: TMenuItem;
    muClose: TMenuItem;
    muHelper: TMenuItem;
    muFuncSay: TMenuItem;
    muVersion: TMenuItem;
    popImage: TPopupMenu;
    poInputText: TMenuItem;
    Save1: TSaveDialog;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure btnCloseClick(Sender: TObject);
    procedure btnStartClick(Sender: TObject);
    procedure Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
    procedure Image1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Image1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure btnExecClick(Sender: TObject);
    procedure poInputTextClick(Sender: TObject);
    procedure muSaveClick(Sender: TObject);
    procedure muOtherSaveClick(Sender: TObject);
  private
    { Private declarations }
     aatom:word;
     mRct:tRect;
     mIsPaint:boolean;
     mFilename:string;
    procedure hotkey(var msg:TMessage); message WM_HOTKEY;
    //function selectSharp
  public
    { Public declarations }
    mFont:tFont;
    mImagePos:tPoint;
    procedure showRct(rct:tRect;bShowCursor:boolean);
  end;

var
  fMain: TfMain;
  workdir:string;//工作目录
  picdir:string;// 保存图片的子目录
function getDateFilename():string;
function captureScreen(x1:integer;y1:integer;x2:integer;y2:integer):tbitmap;
Function DrawCursor(Bit : TBitmap) : TBitmap;

procedure init();
implementation

{$R *.dfm}

procedure TfMain.btnCloseClick(Sender: TObject);
begin
 close;
end;

procedure TfMain.btnExecClick(Sender: TObject);
var
  cmdLine:ansiString;
begin
  cmdLine:='mspaint '+ansistring(mFilename);
  WinExec(pansiChar(cmdLine),SW_SHOWNORMAL);
end;

procedure TfMain.btnStartClick(Sender: TObject);
begin
  if(btnStart.Caption='截图') then begin
    fMask.Show;
    btnStart.Caption:='停止';
  end else begin
    fMask.hide;
    btnStart.Caption:='截图';
  end;

end;

procedure TfMain.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  UnregisterHotKey(Handle,aatom);
  GlobalDeleteAtom(aatom);

end;

procedure TfMain.FormShow(Sender: TObject);
var
  aatom1:word;
begin
  init();
if FindAtom('capscreen_hotKey')=0 then
  begin
    aatom:=GlobalAddAtom('capscreen_hotKey');
  end;
  if RegisterHotKey(Handle,aatom,MOD_ALT,VK_F12) then  //MOD_CONTROL
  begin
    //MessageBox(Handle,'按Ctrl+F12截图全屏!','提示',MB_OK);
  end else begin
    MessageBox(Handle,'注册Ctrl+F12失败!','提示',MB_OK);
  end;
  if RegisterHotKey(Handle,aatom,MOD_ALT,VK_F11) then
  begin
    //MessageBox(Handle,'按Ctrl+F11截图当前窗口!','提示',MB_OK);
  end else begin
    MessageBox(Handle,'注册Ctrl+F11失败!','提示',MB_OK);
  end;
  //stb1.Panels[2].Text:='说明：按Ctrl+F12截图全屏!按Ctrl+F11截图当前窗口!';
  cb1.Selected:=clRed;
end;
procedure TfMain.hotkey(var msg: TMessage);
var
  bmp:tbitmap;
  filename:string;
  hForm:HWND;
  rct:tRect;
  h,w:integer;
begin
  if TWMHotKey(msg).HotKey=aatom then
  begin
    //ShowMessage('s');
  end;
  if (msg.LParamHi=VK_F12) and (msg.LParamLo=MOD_CONTROL) then  //全屏
  begin
    rct.Left:=0;
    rct.Top:=0;
    rct.Right:=screen.Width;
    rct.Bottom:=screen.Height;
    showRct(rct,true);
  end;
  if (msg.LParamHi=VK_F11) and (msg.LParamLo=MOD_CONTROL) then  //当前活动窗口
  begin
    hForm:=GetForegroundWindow();
    GetWindowRect(hForm,rct);
    showRct(rct,false);
  end;

end;
procedure TfMain.Image1MouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  mIsPaint:=true;
  mRct.Left:=x;
  mRct.Top:=y;
  Image1.Canvas.Pen.Width:=strtoint(cmbFine.Items[cmbFine.ItemIndex]);
  Image1.Canvas.Pen.Style:=psDash;
  Image1.Canvas.Pen.Color:=cb1.Selected;
  Image1.canvas.Pen.Mode:=pmcopy;
  Image1.Canvas.Brush.Color:=clWhite;
  Image1.Canvas.Brush.Style:=bsClear;
  case cmbShape.ItemIndex of
    0:begin  //直线
       Image1.canvas.MoveTo(x,y);
    end;
    1:begin  //矩形
      //Canvas.Rectangle(mRct);
    end;
  end;
end;

procedure TfMain.Image1MouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  mImagePos.X:=x;
  mImagePos.Y:=y;
  fMain.stb1.Panels[2].Text:='坐标：'+inttostr(x)+','+inttostr(y);
  if(mIsPaint=false)then exit;
  mRct.Right:=x;
  mRct.Bottom:=y;

  case cmbShape.ItemIndex of
    0:begin  //直线
      Image1.canvas.LineTo(x,y);
    end;
    1:begin  //矩形
      //Image1.Canvas.Brush.Style:=bsClear;
      Image1.Canvas.Rectangle(mRct);
    end;
  end;
end;

procedure TfMain.Image1MouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  mIsPaint:=false;
end;

procedure TfMain.muOtherSaveClick(Sender: TObject);
begin
  save1.Filter:= 'BMP文件(*.bmp)|*.bmp';  //设置保存文件的扩展名
  save1.DefaultExt := '.bmp';              //为保存文件名自动添加扩展名
  save1.Title:='保存图片';
  save1.InitialDir:=extractfiledir(mFilename);
  if(save1.Execute())then begin
    mFilename:=save1.FileName;
    image1.Picture.SaveToFile(mFilename);
    stb1.Panels[1].Text:=extractfilename(mFilename);
  end;
end;

procedure TfMain.muSaveClick(Sender: TObject);
begin
  image1.Picture.SaveToFile(mFilename);
end;

procedure TfMain.poInputTextClick(Sender: TObject);
var
  pos:tPoint;
begin
  getCursorPos(pos);
  fInputText.mTextPos:=mImagePos;
  fInputText.edtPos.Text:=inttostr(mImagePos.X)+','+inttostr(mImagePos.Y);
  fInputText.Left:=Pos.X;
  fInputText.Top:=Pos.Y;
  fInputText.ShowModal;

end;

procedure TfMain.showRct(rct:tRect;bShowCursor:boolean);
var
  bmp:tbitmap;
  filename,sTime:string;
begin
  bmp:=captureScreen(rct.Left,rct.Top,rct.Right,rct.Bottom);
  if(bShowCursor) then DrawCursor(bmp);
  sTime:=getDateFilename();
  filename:=picdir+'\'+sTime+'.bmp';
  mFilename:=filename;
  bmp.SaveToFile(filename);
  image1.Picture.Bitmap.Assign(bmp);
  stb1.Panels[0].Text:='图片宽高：'+inttostr(rct.Width)+','+inttostr(rct.Height);
  stb1.Panels[1].Text:='文件名：'+sTime+'.bmp';
  Clipboard.Assign(Bmp); //放到剪贴板内
  bmp.Free;
end;

//--------------------------------------------------------------------------------------------
 function getDateFilename():string;
  var
    s:string;
  begin
    DateTimeToString(s,'yyyymmddhhnnsss',now());
    result:=s;
  end;

function captureScreen(x1:integer;y1:integer;x2:integer;y2:integer):tbitmap;
var
  dc:HDC;
  bmp:tbitmap;
  fullCanvas:TCanvas;
begin
  dc:=GetDC(0);
  fullCanvas:=TCanvas.Create;
  fullCanvas.Handle:=dc;
  bmp:=TBitmap.Create;
  try
    bmp.Width:=abs(x2-x1);
    bmp.Height:=abs(y2-y1);
    bmp.Canvas.CopyRect(Rect(0,0,bmp.Width,bmp.Height),fullCanvas,Rect(x1,y1,x2,y2));
    //bmp.SaveToFile('c:\tmp\1.bmp');
  finally
  end;
  result:=bmp;
end;
procedure init();
var
    me:String;
begin
    me:=application.ExeName;
    workdir:=extractfiledir(me);
    picdir:=workdir+'\'+PIC_DIR;
    if(not DirectoryExists(picdir))then
      ForceDirectories(picdir);

end;

//*************** Draw Cursor on the bitmap ******************
Function DrawCursor(Bit : TBitmap) : TBitmap;
Var
Cur : TCursorInfo;
Icn : TIcon;
IcnInfo : TIconInfo;
Rec : TRect;
begin
Icn := TIcon.Create;
Rec := Bit.Canvas.ClipRect;
try
Cur.cbSize := SizeOf(Cur);
if GetCursorInfo(Cur) then
if Cur.flags = CURSOR_SHOWING then
begin
Icn.Handle := CopyIcon(Cur.hCursor);
if GetIconInfo(Icn.Handle, IcnInfo) then
Bit.Canvas.Draw(Cur.ptScreenPos.X - Integer(IcnInfo.XHotSpot) - Rec.Left,
Cur.ptScreenPos.Y - Integer(IcnInfo.YHotSpot) - Rec.Top,
Icn);
end;
finally
Icn.Free;
end;
Result := Bit;
end;
//************ End of cursor drawing *************************
end.
